//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace TechFix.localhostInventory {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="InventoryManageServiceSoap", Namespace="http://tempuri.org/")]
    public partial class InventoryManageService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback InsertInventoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateInventoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateInvFrmQuotationOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteInventoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindInventoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ViewAllInventoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetItemsToRestockOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public InventoryManageService() {
            this.Url = global::TechFix.Properties.Settings.Default.TechFix_localhostInventory_InventoryManageService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event InsertInventoryCompletedEventHandler InsertInventoryCompleted;
        
        /// <remarks/>
        public event UpdateInventoryCompletedEventHandler UpdateInventoryCompleted;
        
        /// <remarks/>
        public event UpdateInvFrmQuotationCompletedEventHandler UpdateInvFrmQuotationCompleted;
        
        /// <remarks/>
        public event DeleteInventoryCompletedEventHandler DeleteInventoryCompleted;
        
        /// <remarks/>
        public event FindInventoryCompletedEventHandler FindInventoryCompleted;
        
        /// <remarks/>
        public event ViewAllInventoryCompletedEventHandler ViewAllInventoryCompleted;
        
        /// <remarks/>
        public event GetItemsToRestockCompletedEventHandler GetItemsToRestockCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertInventory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertInventory(int userID, string itemName, string brand, string serialNo, int quantity, double unitPrice, string supplier) {
            object[] results = this.Invoke("InsertInventory", new object[] {
                        userID,
                        itemName,
                        brand,
                        serialNo,
                        quantity,
                        unitPrice,
                        supplier});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertInventoryAsync(int userID, string itemName, string brand, string serialNo, int quantity, double unitPrice, string supplier) {
            this.InsertInventoryAsync(userID, itemName, brand, serialNo, quantity, unitPrice, supplier, null);
        }
        
        /// <remarks/>
        public void InsertInventoryAsync(int userID, string itemName, string brand, string serialNo, int quantity, double unitPrice, string supplier, object userState) {
            if ((this.InsertInventoryOperationCompleted == null)) {
                this.InsertInventoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertInventoryOperationCompleted);
            }
            this.InvokeAsync("InsertInventory", new object[] {
                        userID,
                        itemName,
                        brand,
                        serialNo,
                        quantity,
                        unitPrice,
                        supplier}, this.InsertInventoryOperationCompleted, userState);
        }
        
        private void OnInsertInventoryOperationCompleted(object arg) {
            if ((this.InsertInventoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertInventoryCompleted(this, new InsertInventoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateInventory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateInventory(int id, int userID, string itemName, string brand, string serialNo, int quantity, double unitPrice, string supplier) {
            object[] results = this.Invoke("UpdateInventory", new object[] {
                        id,
                        userID,
                        itemName,
                        brand,
                        serialNo,
                        quantity,
                        unitPrice,
                        supplier});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateInventoryAsync(int id, int userID, string itemName, string brand, string serialNo, int quantity, double unitPrice, string supplier) {
            this.UpdateInventoryAsync(id, userID, itemName, brand, serialNo, quantity, unitPrice, supplier, null);
        }
        
        /// <remarks/>
        public void UpdateInventoryAsync(int id, int userID, string itemName, string brand, string serialNo, int quantity, double unitPrice, string supplier, object userState) {
            if ((this.UpdateInventoryOperationCompleted == null)) {
                this.UpdateInventoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateInventoryOperationCompleted);
            }
            this.InvokeAsync("UpdateInventory", new object[] {
                        id,
                        userID,
                        itemName,
                        brand,
                        serialNo,
                        quantity,
                        unitPrice,
                        supplier}, this.UpdateInventoryOperationCompleted, userState);
        }
        
        private void OnUpdateInventoryOperationCompleted(object arg) {
            if ((this.UpdateInventoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateInventoryCompleted(this, new UpdateInventoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateInvFrmQuotation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateInvFrmQuotation(int id, int quantity, double unitPrice) {
            object[] results = this.Invoke("UpdateInvFrmQuotation", new object[] {
                        id,
                        quantity,
                        unitPrice});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateInvFrmQuotationAsync(int id, int quantity, double unitPrice) {
            this.UpdateInvFrmQuotationAsync(id, quantity, unitPrice, null);
        }
        
        /// <remarks/>
        public void UpdateInvFrmQuotationAsync(int id, int quantity, double unitPrice, object userState) {
            if ((this.UpdateInvFrmQuotationOperationCompleted == null)) {
                this.UpdateInvFrmQuotationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateInvFrmQuotationOperationCompleted);
            }
            this.InvokeAsync("UpdateInvFrmQuotation", new object[] {
                        id,
                        quantity,
                        unitPrice}, this.UpdateInvFrmQuotationOperationCompleted, userState);
        }
        
        private void OnUpdateInvFrmQuotationOperationCompleted(object arg) {
            if ((this.UpdateInvFrmQuotationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateInvFrmQuotationCompleted(this, new UpdateInvFrmQuotationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteInventory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteInventory(int id) {
            object[] results = this.Invoke("DeleteInventory", new object[] {
                        id});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteInventoryAsync(int id) {
            this.DeleteInventoryAsync(id, null);
        }
        
        /// <remarks/>
        public void DeleteInventoryAsync(int id, object userState) {
            if ((this.DeleteInventoryOperationCompleted == null)) {
                this.DeleteInventoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteInventoryOperationCompleted);
            }
            this.InvokeAsync("DeleteInventory", new object[] {
                        id}, this.DeleteInventoryOperationCompleted, userState);
        }
        
        private void OnDeleteInventoryOperationCompleted(object arg) {
            if ((this.DeleteInventoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteInventoryCompleted(this, new DeleteInventoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FindInventory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FindInventory(int id) {
            object[] results = this.Invoke("FindInventory", new object[] {
                        id});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FindInventoryAsync(int id) {
            this.FindInventoryAsync(id, null);
        }
        
        /// <remarks/>
        public void FindInventoryAsync(int id, object userState) {
            if ((this.FindInventoryOperationCompleted == null)) {
                this.FindInventoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindInventoryOperationCompleted);
            }
            this.InvokeAsync("FindInventory", new object[] {
                        id}, this.FindInventoryOperationCompleted, userState);
        }
        
        private void OnFindInventoryOperationCompleted(object arg) {
            if ((this.FindInventoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindInventoryCompleted(this, new FindInventoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ViewAllInventory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ViewAllInventory() {
            object[] results = this.Invoke("ViewAllInventory", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ViewAllInventoryAsync() {
            this.ViewAllInventoryAsync(null);
        }
        
        /// <remarks/>
        public void ViewAllInventoryAsync(object userState) {
            if ((this.ViewAllInventoryOperationCompleted == null)) {
                this.ViewAllInventoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnViewAllInventoryOperationCompleted);
            }
            this.InvokeAsync("ViewAllInventory", new object[0], this.ViewAllInventoryOperationCompleted, userState);
        }
        
        private void OnViewAllInventoryOperationCompleted(object arg) {
            if ((this.ViewAllInventoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ViewAllInventoryCompleted(this, new ViewAllInventoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItemsToRestock", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetItemsToRestock() {
            object[] results = this.Invoke("GetItemsToRestock", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetItemsToRestockAsync() {
            this.GetItemsToRestockAsync(null);
        }
        
        /// <remarks/>
        public void GetItemsToRestockAsync(object userState) {
            if ((this.GetItemsToRestockOperationCompleted == null)) {
                this.GetItemsToRestockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemsToRestockOperationCompleted);
            }
            this.InvokeAsync("GetItemsToRestock", new object[0], this.GetItemsToRestockOperationCompleted, userState);
        }
        
        private void OnGetItemsToRestockOperationCompleted(object arg) {
            if ((this.GetItemsToRestockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemsToRestockCompleted(this, new GetItemsToRestockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void InsertInventoryCompletedEventHandler(object sender, InsertInventoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertInventoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertInventoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void UpdateInventoryCompletedEventHandler(object sender, UpdateInventoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateInventoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateInventoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void UpdateInvFrmQuotationCompletedEventHandler(object sender, UpdateInvFrmQuotationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateInvFrmQuotationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateInvFrmQuotationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void DeleteInventoryCompletedEventHandler(object sender, DeleteInventoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteInventoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteInventoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void FindInventoryCompletedEventHandler(object sender, FindInventoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindInventoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindInventoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void ViewAllInventoryCompletedEventHandler(object sender, ViewAllInventoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ViewAllInventoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ViewAllInventoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetItemsToRestockCompletedEventHandler(object sender, GetItemsToRestockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemsToRestockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItemsToRestockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591